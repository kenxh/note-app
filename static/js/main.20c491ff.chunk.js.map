{"version":3,"sources":["components/header.js","components/footer.js","data/services/firebase_config.js","data/services/database.js","Note.js","Login.js","App.js","data/markdown/app_background.js","index.js"],"names":["Header","className","to","Footer","Date","getFullYear","dotenv","config","firebase","apps","length","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fb","db","database","auth","ref","methods","getAllNotes","setNotes","on","snapshot","dto","val","result","Object","keys","map","id","note","date","values","createNote","data","newNote","push","set","key","updateNote","child","update","Note","changeEditStatus","edit","currNoteId","saveNote","disabled","useState","currNote","setCurrNote","isCurrNote","Form","Group","FormControl","as","rows","defaultValue","onChange","e","target","value","dsiabled","InputGroup","Append","Button","onClick","toLocaleString","Login","onLogin","email","setEmail","password","setPassword","onSubmit","preventDefault","Row","Col","type","placeholder","App","setEdit","notes","setCurrNoteId","useAuthState","user","getTime","savedNote","useEffect","source","signOut","signInWithEmailAndPassword","catch","console","log","Index","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20c491ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => (\r\n  <header className=\"masthead\">\r\n    <div>\r\n      <div>\r\n        <Link to=\"/\">\r\n          <h1 className=\"site-title\">Notes App</h1>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <footer>Â© {new Date().getFullYear()} - Kendall Howard</footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import firebase from \"firebase\";\r\nimport dotenv from \"dotenv\";\r\n\r\n// don't change anything in this file\r\n\r\ndotenv.config();\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DB_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp(config);\r\n}\r\n\r\nconst fb = {\r\n  db: firebase.database(),\r\n  auth: firebase.auth(),\r\n};\r\n\r\nexport default fb;\r\n","import firebase from \"./firebase_config\";\r\n\r\nconst db = firebase.db.ref(\"notes\");\r\n\r\nconst getAllNotes = (setNotes) => {\r\n  return db.on(\"value\", function (snapshot) {\r\n    const dto = snapshot.val();\r\n\r\n    // TODO: if dto is null, pass an empty array to setNotes & return early\r\n    if (dto == null) {\r\n      setNotes([]);\r\n      return setNotes\r\n    };\r\n\r\n    // firebase returns an object full of objects, with the unique id as each inner object's key\r\n    // this manipulates that data so each inner object contains this unique id as a property\r\n    const result = Object.keys(dto).map((id) => ({\r\n      id,\r\n      note: dto[id].note,\r\n      date: dto[id].date,\r\n    }));\r\n\r\n    setNotes(Object.values(result));\r\n  });\r\n};\r\n\r\nconst createNote = (data) => {\r\n  // this generates a unique id for any data that's about to be sent to the database\r\n  const newNote = db.push();\r\n  // this passes the data to the database\r\n  newNote.set(data);\r\n  // we return the generated key to store it locally :)\r\n  return newNote.key;\r\n};\r\n\r\nconst updateNote = (id, note, date) => {\r\n  // TODO: using db.child & chaining on the .update method, finish the code to update a note already in the database\r\n  // this is meant to be challenging, so you'll need to google how to use .update\r\n  // tip: db is already equal to firebase.database.ref(\"notes\")\r\n  db.child(id).update({ note, date });\r\n};\r\n\r\n/**CHALLENGE: create a function called removeNote that takes in an id and deletes a note in the database\r\n *\r\n */\r\n\r\nconst methods = {\r\n  getAllNotes,\r\n  createNote,\r\n  updateNote,\r\n  // don't forget to export removeNote if you write it\r\n};\r\n\r\nexport default methods;\r\n","import { useState } from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst Note = ({\r\n  id,\r\n  note,\r\n  date,\r\n  changeEditStatus,\r\n  edit,\r\n  currNoteId,\r\n  saveNote,\r\n  disabled,\r\n}) => {\r\n  const [currNote, setCurrNote] = useState(note);\r\n\r\n  const editNote = (e) => {\r\n    if (currNoteId !== id) {\r\n      changeEditStatus(id);\r\n    }\r\n    setCurrNote(e.target.value);\r\n  };\r\n\r\n  const save = () => {\r\n    // TODO: call saveNote with id & the currNote state variable\r\n    saveNote(id, currNote);\r\n  };\r\n\r\n  const isCurrNote = currNoteId === id;\r\n\r\n  return (\r\n    <div className=\"col-3 note\" key={id}>\r\n      <Form>\r\n        <Form.Group>\r\n          {/** TODO: pass a couple important props to each Note component\r\n           * pass note to the defaultValue prop\r\n           * pass the editNote function to the onChange prop\r\n           * pass disabled to the disabled prop\r\n           */}\r\n          <FormControl as=\"textarea\" rows={5} defaultValue={note} onChange={editNote} dsiabled={disabled}/>\r\n          <InputGroup.Append>\r\n            {edit && isCurrNote && (\r\n              // TODO: pass the save function to the onClick prop of Button\r\n              <Button className=\"save-btn\" onClick={save}>Save</Button>\r\n            )}\r\n          </InputGroup.Append>\r\n        </Form.Group>\r\n      </Form>\r\n      {/**For fun: figure out other ways to display the date */}\r\n      <div className=\"date\">{date.toLocaleString()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import { useState } from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst Login = ({ onLogin }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  /**TODO: write 2 functions\r\n   * updateEmail -> it will pass the value of the target to setEmail\r\n   * updatePassword -> it will pass the value of the target to setPassword\r\n   */\r\n  const updateEmail = (e) => {setEmail(e.target.value)};\r\n  const updatePassword = (e) => {setPassword(e.target.value)};\r\n\r\n  const authenticate = (e) => {\r\n    e.preventDefault();\r\n    //TODO: pass the state variables, email and password, to the onLogin function (which was passed down prop from App)\r\n    onLogin(email, password);\r\n  };\r\n  return (\r\n    <Form onSubmit={authenticate}>\r\n      <Form.Group>\r\n        <Row>\r\n          <Col>\r\n            {/**\r\n             * TODO: pass updateEmail & updatePassword functions to the onChange prop for each respective\r\n             * FormControl component\r\n             */}\r\n            <FormControl type=\"email\" placeholder=\"Enter email\" onChange={updateEmail}/>\r\n          </Col>\r\n          <Col>\r\n            <FormControl type=\"password\" placeholder=\"Password\" onChange={updatePassword}/>\r\n          </Col>\r\n          <Col>\r\n            <InputGroup.Append>\r\n              <Button className=\"save-btn\" type=\"submit\">\r\n                Login\r\n              </Button>\r\n            </InputGroup.Append>\r\n          </Col>\r\n        </Row>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useState, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\n\r\nimport { app_background } from \"./data/markdown\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport db from \"./data/services/database\";\r\nimport fb from \"./data/services/firebase_config\";\r\n\r\nimport Note from \"./Note\";\r\nimport Login from \"./Login\";\r\n\r\nconst App = () => {\r\n  const [edit, setEdit] = useState(false);\r\n  const [notes, setNotes] = useState(null);\r\n  const [currNoteId, setCurrNoteId] = useState(\"\");\r\n  const [user] = useAuthState(fb.auth);\r\n\r\n  const login = (email, password) => {\r\n    fb.auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch((e) => console.log(e));\r\n    console.log(\"pizza\")\r\n  };\r\n\r\n  const logout = () => {\r\n    fb.auth.signOut();\r\n  };\r\n\r\n  const changeEditStatus = (id) => {\r\n    setCurrNoteId(id);\r\n    if (id !== currNoteId) {\r\n      setEdit(!edit);\r\n    }\r\n  };\r\n\r\n  const saveNote = (id, note) => {\r\n    setEdit(!edit);\r\n    if (id) {\r\n      // a.k.a if this note already exists in the database & it's being edited\r\n      // TODO: using the \"db\" variable, call the updateNote function\r\n      // pass it id, note, and a new date object like so: new Date().getTime()\r\n      db.updateNote(id, note, new Date().getTime())\r\n    } else {\r\n      // a.k.a a completely new note\r\n      const date = new Date().getTime();\r\n      const savedNote = { note, date };\r\n      const key = db.createNote(savedNote); // returns the key from our createNote function\r\n      if (notes) {\r\n        // a.k.a if this is not the first note ever created in the database\r\n        // TODO: using the spread operator, call setNotes & pass it an array\r\n        // containing what was already in notes as well as an object containing\r\n        // an id (with the value of the key variable), note and date\r\n        setNotes([...notes, {id, key, savedNote}])\r\n      } else {\r\n        // a.k.a if this is the first note ever made\r\n        // TODO: pass setNotes an array with a single object, containing the same info\r\n        // as the object described in the if block above\r\n        setNotes([{id, key, savedNote}])\r\n      }\r\n    }\r\n  };\r\n\r\n  const addNote = () => {\r\n    // TODO: call saveNote passing in a null id & empty string\r\n    saveNote(null, \"\")\r\n  };\r\n\r\n  useEffect(() => {\r\n    // TODO: check if notes is null. if so, call the getAllNotes method using the variable \"db\"\r\n    // make sure to pass the setter function for the notes state variable to getAllNotes\r\n    if (!notes) {\r\n      db.getAllNotes(setNotes)\r\n    }\r\n  }, [notes]);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div id=\"content\">\r\n        <ReactMarkdown className=\"background\" source={app_background} />\r\n        <div className=\"container\">\r\n          <div className=\"justify-content-md-center\">\r\n            {user ? (\r\n              <Button onClick={logout}>Logout</Button>\r\n            ) : (\r\n              // TODO: pass the login function as prop called \"onLogin\" to the Login component\r\n              <Login onLogin={login} />\r\n            )}\r\n          </div>\r\n          <div className=\"row justify-content-md-center\">\r\n            {notes &&\r\n              notes.map(({ id, note, date }) => (\r\n                /** TODO: pass a whole lot of props to the Note component\r\n                 * pass the value of id to the key & id prop\r\n                 * pass the value of note, currNoteId, changeEditStatus, edit, saveNote\r\n                 * the disabled prop will turn off editing when the user isn't logged in\r\n                 */\r\n                <Note date={new Date(date)} disabled={!user} id={id} note={note} currNoteId={currNoteId} \r\n                changeEditStatus={changeEditStatus} edit={edit} saveNote={saveNote}/>\r\n              ))}\r\n          </div>\r\n          {/**TODO: use the double amperstand (&&) to show a button only if the user variable is not null\r\n           * pass the addNote function to the Button when clicked\r\n           * This is the Add Note button :)\r\n           * TIP: there's an example of how to do this on line 85\r\n           */}\r\n           {user && <Button onClick={addNote}>Add Note</Button>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const app_background = `##### Login and write some notes!`;\r\n\r\nexport default app_background;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport { Header, Footer } from \"./components\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Index = () => (\r\n  <div className=\"main\">\r\n    <BrowserRouter>\r\n      <Header />\r\n      <div>\r\n        <Route path=\"/\" component={App} />\r\n      </div>\r\n      <Footer />\r\n    </BrowserRouter>\r\n  </div>\r\n);\r\n\r\nReactDOM.render(<Index />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}